{
  "libraries": [
    {
      "name": "cdn",
      "functions": [
        {
          "name": "openFile",
          "doc": "OpenFile stored on the CDN. Writing to the file will cause an upload to the CDN, overwriting any previously stored contents. Reading the file will download it from the CDN. Since operations are performed lazily, openFile will never error however reading from or writing to the file may.",
          "params": [{ "name": "name", "type": "String" }],
          "retvals": [{ "name": "f", "type": "File" }]
        }
      ]
    },
    {
      "name": "file",
      "functions": [
        {
          "name": "move",
          "doc": "Move a file to the desired location.",
          "params": [
            { "name": "f", "type": "File" },
            { "name": "dstPath", "type": "String" }
          ],
          "retvals": [{ "name": "err", "type": "Error" }]
        },
        {
          "name": "name",
          "doc": "Name returns file's basename.",
          "params": [{ "name": "f", "type": "File" }],
          "retvals": [{ "name": "name", "type": "String" }]
        },
        {
          "name": "content",
          "doc": "Content returns the file's content.",
          "params": [{ "name": "f", "type": "File" }],
          "retvals": [
            { "name": "content", "type": "String" },
            { "name": "err", "type": "Error" }
          ]
        },
        {
          "name": "write",
          "doc": "Write sets the file's content.",
          "params": [
            { "name": "f", "type": "File" },
            { "name": "content", "type": "String" }
          ],
          "retvals": [{ "name": "err", "type": "Error" }]
        },
        {
          "name": "copy",
          "doc": "Copy the file's content into another file.",
          "params": [
            { "name": "src", "type": "File" },
            { "name": "dst", "type": "File" }
          ],
          "retvals": [{ "name": "err", "type": "Error" }]
        },
        {
          "name": "remove",
          "doc": "Remove the file. It will become unuseable after calling this operation.",
          "params": [{ "name": "f", "type": "File" }],
          "retvals": [{ "name": "err", "type": "Error" }]
        },
        {
          "name": "chown",
          "doc": "Chown modifies the file's ownership metadata. Passing an empty string for either the username or group parameter will result in a no-op. For example, file.chown(f, '', 'new_group') will change the file's group ownership to 'new_group' but will not affect the file's user ownership.",
          "params": [
            { "name": "f", "type": "File" },
            { "name": "username", "type": "String" },
            { "name": "group", "type": "String" }
          ],
          "retvals": [{ "name": "err", "type": "Error" }]
        },
        {
          "name": "chmod",
          "doc": "Chmod modifies the file's permission metadata. The strong passed is expected to be an octal representation of what os.FileMode you wish to set file to have.",
          "params": [
            { "name": "f", "type": "File" },
            { "name": "mode", "type": "String" }
          ],
          "retvals": [{ "name": "err", "type": "Error" }]
        },
        {
          "name": "close",
          "doc": "Close a file if possible, otherwise this operation is a no-op.",
          "params": [{ "name": "f", "type": "File" }],
          "retvals": null
        }
      ]
    },
    {
      "name": "http",
      "functions": [
        {
          "name": "newRequest",
          "doc": "NewRequest creates a new Request object to be passed around.",
          "params": [{ "name": "url", "type": "String" }],
          "retvals": [{ "name": "request", "type": "Request" }]
        },
        {
          "name": "setMethod",
          "doc": "SetMethod sets the http method on the request object.",
          "params": [
            { "name": "r", "type": "Request" },
            { "name": "method", "type": "String" }
          ],
          "retvals": null
        },
        {
          "name": "setHeader",
          "doc": "SetHeader sets the http header to the value passed on the request object.",
          "params": [
            { "name": "r", "type": "Request" },
            { "name": "header", "type": "String" },
            { "name": "value", "type": "String" }
          ],
          "retvals": null
        },
        {
          "name": "setBody",
          "doc": "SetBody sets the http body to the value passed on the request object.",
          "params": [
            { "name": "r", "type": "Request" },
            { "name": "value", "type": "String" }
          ],
          "retvals": null
        },
        {
          "name": "exec",
          "doc": "Exec sends the passed request object.",
          "params": [{ "name": "r", "type": "Request" }],
          "retvals": [
            { "name": "response", "type": "String" },
            { "name": "err", "type": "Error" }
          ]
        }
      ]
    },
    {
      "name": "process",
      "functions": [
        {
          "name": "kill",
          "doc": "Kill a process (using SIGKILL).",
          "params": [{ "name": "proc", "type": "Process" }],
          "retvals": [{ "name": "err", "type": "Error" }]
        },
        {
          "name": "name",
          "doc": "Name gets the name of the passed process.",
          "params": [{ "name": "proc", "type": "Process" }],
          "retvals": [
            { "name": "name", "type": "String" },
            { "name": "err", "type": "Error" }
          ]
        }
      ]
    },
    {
      "name": "regex",
      "functions": [
        {
          "name": "replaceString",
          "doc": "Replace uses the golang regex lib to replace all occurences of the pattern in the old string into the new strong.",
          "params": [
            { "name": "oldString", "type": "String" },
            { "name": "pattern", "type": "String" },
            { "name": "newString", "type": "String" }
          ],
          "retvals": [
            { "name": "replacedString", "type": "String" },
            { "name": "err", "type": "Error" }
          ]
        },
        {
          "name": "replace",
          "doc": "Replace uses the golang regex lib to replace all occurences of the pattern in the old string into the new strong.",
          "params": [
            { "name": "oldString", "type": "String" },
            { "name": "pattern", "type": "String" },
            { "name": "newString", "type": "String" }
          ],
          "retvals": [
            { "name": "replacedString", "type": "String" },
            { "name": "err", "type": "Error" }
          ]
        }
      ]
    },
    {
      "name": "ssh",
      "functions": [
        {
          "name": "exec",
          "doc": "Exec a command on the remote system using an underlying ssh session.",
          "params": [
            { "name": "cmd", "type": "String" },
            { "name": "disown", "type": "?Bool" }
          ],
          "retvals": [
            { "name": "output", "type": "String" },
            { "name": "err", "type": "Error" }
          ]
        },
        {
          "name": "openFile",
          "doc": "OpenFile on the remote system using SFTP over SSH. The file is created if it does not yet exist.",
          "params": [{ "name": "path", "type": "String" }],
          "retvals": [
            { "name": "f", "type": "File" },
            { "name": "err", "type": "Error" }
          ]
        }
      ]
    },
    {
      "name": "assets",
      "functions": [
        {
          "name": "openFile",
          "doc": "OpenFile that was packed into the compiled binary. The resulting file does not support many operations such as Chown, Write, etc. but you may read it's contents or copy it to another file i.e. one opened by ssh or sys.",
          "params": [{ "name": "path", "type": "String" }],
          "retvals": [
            { "name": "f", "type": "File" },
            { "name": "err", "type": "Error" }
          ]
        },
        {
          "name": "drop",
          "doc": "Drop will take a given file, copy it to disk, optionaly set the permissions move it to a given destination, and clean up the temp file created. The default perms are '0755'.",
          "params": [
            { "name": "f", "type": "File" },
            { "name": "dstPath", "type": "String" },
            { "name": "perms", "type": "String" }
          ],
          "retvals": [{ "name": "err", "type": "Error" }]
        }
      ]
    },
    {
      "name": "sys",
      "functions": [
        {
          "name": "openFile",
          "doc": "OpenFile uses os.Open to Open a file.",
          "params": [{ "name": "path", "type": "String" }],
          "retvals": [
            { "name": "f", "type": "File" },
            { "name": "err", "type": "Error" }
          ]
        },
        {
          "name": "detectOS",
          "doc": "DetectOS uses the GOOS variable to determine the OS.",
          "params": null,
          "retvals": [{ "name": "os", "type": "String" }]
        },
        {
          "name": "exec",
          "doc": "Exec uses the os/exec.command to execute the passed executable/params.",
          "params": [
            { "name": "executable", "type": "String" },
            { "name": "disown", "type": "?Bool" }
          ],
          "retvals": [
            { "name": "output", "type": "String" },
            { "name": "err", "type": "Error" }
          ]
        },
        {
          "name": "connections",
          "doc": "Connections uses the gopsutil/net to get all connections created by a process (or all by default).",
          "params": [{ "name": "parent", "type": "?Process" }],
          "retvals": [{ "name": "connections", "type": "[]Connection" }]
        },
        {
          "name": "processes",
          "doc": "Processes uses the gopsutil/process to get all processes.",
          "params": null,
          "retvals": [{ "name": "procs", "type": "[]Process" }]
        },
        {
          "name": "files",
          "doc": "Files uses the ioutil.ReadDir to get all files in a given path.",
          "params": null,
          "retvals": [{ "name": "files", "type": "[]File" }]
        }
      ]
    },
    {
      "name": "assert",
      "functions": [
        {
          "name": "noError",
          "doc": "NoError will check if the passed value is a starlark.NoneType, if not it will error out the script.  This function may cause a fatal error if the assertion is incorrect.",
          "params": [{ "name": "err", "type": "starlark.Value" }],
          "retvals": null
        },
        {
          "name": "equal",
          "doc": "Equal will check if two values are equal. This function will result in a fatal error if the assertion is incorrect.",
          "params": [
            { "name": "expected", "type": "starlark.Value" },
            { "name": "actual", "type": "starlark.Value" }
          ],
          "retvals": null
        }
      ]
    }
  ]
}
