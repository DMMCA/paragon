// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/kcarretto/paragon/ent/credential"
	"github.com/kcarretto/paragon/ent/event"
	"github.com/kcarretto/paragon/ent/file"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/link"
	"github.com/kcarretto/paragon/ent/predicate"
	"github.com/kcarretto/paragon/ent/service"
	"github.com/kcarretto/paragon/ent/tag"
	"github.com/kcarretto/paragon/ent/target"
	"github.com/kcarretto/paragon/ent/task"
	"github.com/kcarretto/paragon/ent/user"
)

// EventQuery is the builder for querying Event entities.
type EventQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.Event
	// eager-loading edges.
	withJob        *JobQuery
	withFile       *FileQuery
	withCredential *CredentialQuery
	withLink       *LinkQuery
	withTag        *TagQuery
	withTarget     *TargetQuery
	withTask       *TaskQuery
	withUser       *UserQuery
	withEvent      *EventQuery
	withService    *ServiceQuery
	withLikers     *UserQuery
	withOwner      *UserQuery
	withSvcOwner   *ServiceQuery
	withFKs        bool
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (eq *EventQuery) Where(ps ...predicate.Event) *EventQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit adds a limit step to the query.
func (eq *EventQuery) Limit(limit int) *EventQuery {
	eq.limit = &limit
	return eq
}

// Offset adds an offset step to the query.
func (eq *EventQuery) Offset(offset int) *EventQuery {
	eq.offset = &offset
	return eq
}

// Order adds an order step to the query.
func (eq *EventQuery) Order(o ...Order) *EventQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryJob chains the current query on the job edge.
func (eq *EventQuery) QueryJob() *JobQuery {
	query := &JobQuery{config: eq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
		sqlgraph.To(job.Table, job.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.JobTable, event.JobColumn),
	)
	query.sql = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
	return query
}

// QueryFile chains the current query on the file edge.
func (eq *EventQuery) QueryFile() *FileQuery {
	query := &FileQuery{config: eq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
		sqlgraph.To(file.Table, file.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.FileTable, event.FileColumn),
	)
	query.sql = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
	return query
}

// QueryCredential chains the current query on the credential edge.
func (eq *EventQuery) QueryCredential() *CredentialQuery {
	query := &CredentialQuery{config: eq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
		sqlgraph.To(credential.Table, credential.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.CredentialTable, event.CredentialColumn),
	)
	query.sql = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
	return query
}

// QueryLink chains the current query on the link edge.
func (eq *EventQuery) QueryLink() *LinkQuery {
	query := &LinkQuery{config: eq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
		sqlgraph.To(link.Table, link.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.LinkTable, event.LinkColumn),
	)
	query.sql = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
	return query
}

// QueryTag chains the current query on the tag edge.
func (eq *EventQuery) QueryTag() *TagQuery {
	query := &TagQuery{config: eq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
		sqlgraph.To(tag.Table, tag.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.TagTable, event.TagColumn),
	)
	query.sql = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
	return query
}

// QueryTarget chains the current query on the target edge.
func (eq *EventQuery) QueryTarget() *TargetQuery {
	query := &TargetQuery{config: eq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
		sqlgraph.To(target.Table, target.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.TargetTable, event.TargetColumn),
	)
	query.sql = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
	return query
}

// QueryTask chains the current query on the task edge.
func (eq *EventQuery) QueryTask() *TaskQuery {
	query := &TaskQuery{config: eq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
		sqlgraph.To(task.Table, task.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.TaskTable, event.TaskColumn),
	)
	query.sql = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
	return query
}

// QueryUser chains the current query on the user edge.
func (eq *EventQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: eq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.UserTable, event.UserColumn),
	)
	query.sql = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
	return query
}

// QueryEvent chains the current query on the event edge.
func (eq *EventQuery) QueryEvent() *EventQuery {
	query := &EventQuery{config: eq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
		sqlgraph.To(event.Table, event.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, event.EventTable, event.EventColumn),
	)
	query.sql = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
	return query
}

// QueryService chains the current query on the service edge.
func (eq *EventQuery) QueryService() *ServiceQuery {
	query := &ServiceQuery{config: eq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
		sqlgraph.To(service.Table, service.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.ServiceTable, event.ServiceColumn),
	)
	query.sql = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
	return query
}

// QueryLikers chains the current query on the likers edge.
func (eq *EventQuery) QueryLikers() *UserQuery {
	query := &UserQuery{config: eq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, event.LikersTable, event.LikersColumn),
	)
	query.sql = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
	return query
}

// QueryOwner chains the current query on the owner edge.
func (eq *EventQuery) QueryOwner() *UserQuery {
	query := &UserQuery{config: eq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, event.OwnerTable, event.OwnerColumn),
	)
	query.sql = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
	return query
}

// QuerySvcOwner chains the current query on the svcOwner edge.
func (eq *EventQuery) QuerySvcOwner() *ServiceQuery {
	query := &ServiceQuery{config: eq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
		sqlgraph.To(service.Table, service.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, event.SvcOwnerTable, event.SvcOwnerColumn),
	)
	query.sql = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
	return query
}

// First returns the first Event entity in the query. Returns *ErrNotFound when no event was found.
func (eq *EventQuery) First(ctx context.Context) (*Event, error) {
	es, err := eq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(es) == 0 {
		return nil, &ErrNotFound{event.Label}
	}
	return es[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EventQuery) FirstX(ctx context.Context) *Event {
	e, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return e
}

// FirstID returns the first Event id in the query. Returns *ErrNotFound when no id was found.
func (eq *EventQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &ErrNotFound{event.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (eq *EventQuery) FirstXID(ctx context.Context) int {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only Event entity in the query, returns an error if not exactly one entity was returned.
func (eq *EventQuery) Only(ctx context.Context) (*Event, error) {
	es, err := eq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(es) {
	case 1:
		return es[0], nil
	case 0:
		return nil, &ErrNotFound{event.Label}
	default:
		return nil, &ErrNotSingular{event.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EventQuery) OnlyX(ctx context.Context) *Event {
	e, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return e
}

// OnlyID returns the only Event id in the query, returns an error if not exactly one id was returned.
func (eq *EventQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &ErrNotFound{event.Label}
	default:
		err = &ErrNotSingular{event.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (eq *EventQuery) OnlyXID(ctx context.Context) int {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Events.
func (eq *EventQuery) All(ctx context.Context) ([]*Event, error) {
	return eq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (eq *EventQuery) AllX(ctx context.Context) []*Event {
	es, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return es
}

// IDs executes the query and returns a list of Event ids.
func (eq *EventQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := eq.Select(event.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EventQuery) IDsX(ctx context.Context) []int {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EventQuery) Count(ctx context.Context) (int, error) {
	return eq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EventQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EventQuery) Exist(ctx context.Context) (bool, error) {
	return eq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EventQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EventQuery) Clone() *EventQuery {
	return &EventQuery{
		config:     eq.config,
		limit:      eq.limit,
		offset:     eq.offset,
		order:      append([]Order{}, eq.order...),
		unique:     append([]string{}, eq.unique...),
		predicates: append([]predicate.Event{}, eq.predicates...),
		// clone intermediate query.
		sql: eq.sql.Clone(),
	}
}

//  WithJob tells the query-builder to eager-loads the nodes that are connected to
// the "job" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithJob(opts ...func(*JobQuery)) *EventQuery {
	query := &JobQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withJob = query
	return eq
}

//  WithFile tells the query-builder to eager-loads the nodes that are connected to
// the "file" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithFile(opts ...func(*FileQuery)) *EventQuery {
	query := &FileQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withFile = query
	return eq
}

//  WithCredential tells the query-builder to eager-loads the nodes that are connected to
// the "credential" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithCredential(opts ...func(*CredentialQuery)) *EventQuery {
	query := &CredentialQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withCredential = query
	return eq
}

//  WithLink tells the query-builder to eager-loads the nodes that are connected to
// the "link" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithLink(opts ...func(*LinkQuery)) *EventQuery {
	query := &LinkQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withLink = query
	return eq
}

//  WithTag tells the query-builder to eager-loads the nodes that are connected to
// the "tag" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithTag(opts ...func(*TagQuery)) *EventQuery {
	query := &TagQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withTag = query
	return eq
}

//  WithTarget tells the query-builder to eager-loads the nodes that are connected to
// the "target" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithTarget(opts ...func(*TargetQuery)) *EventQuery {
	query := &TargetQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withTarget = query
	return eq
}

//  WithTask tells the query-builder to eager-loads the nodes that are connected to
// the "task" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithTask(opts ...func(*TaskQuery)) *EventQuery {
	query := &TaskQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withTask = query
	return eq
}

//  WithUser tells the query-builder to eager-loads the nodes that are connected to
// the "user" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithUser(opts ...func(*UserQuery)) *EventQuery {
	query := &UserQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withUser = query
	return eq
}

//  WithEvent tells the query-builder to eager-loads the nodes that are connected to
// the "event" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithEvent(opts ...func(*EventQuery)) *EventQuery {
	query := &EventQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEvent = query
	return eq
}

//  WithService tells the query-builder to eager-loads the nodes that are connected to
// the "service" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithService(opts ...func(*ServiceQuery)) *EventQuery {
	query := &ServiceQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withService = query
	return eq
}

//  WithLikers tells the query-builder to eager-loads the nodes that are connected to
// the "likers" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithLikers(opts ...func(*UserQuery)) *EventQuery {
	query := &UserQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withLikers = query
	return eq
}

//  WithOwner tells the query-builder to eager-loads the nodes that are connected to
// the "owner" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithOwner(opts ...func(*UserQuery)) *EventQuery {
	query := &UserQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withOwner = query
	return eq
}

//  WithSvcOwner tells the query-builder to eager-loads the nodes that are connected to
// the "svcOwner" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithSvcOwner(opts ...func(*ServiceQuery)) *EventQuery {
	query := &ServiceQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withSvcOwner = query
	return eq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreationTime time.Time `json:"CreationTime,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Event.Query().
//		GroupBy(event.FieldCreationTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (eq *EventQuery) GroupBy(field string, fields ...string) *EventGroupBy {
	group := &EventGroupBy{config: eq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = eq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreationTime time.Time `json:"CreationTime,omitempty"`
//	}
//
//	client.Event.Query().
//		Select(event.FieldCreationTime).
//		Scan(ctx, &v)
//
func (eq *EventQuery) Select(field string, fields ...string) *EventSelect {
	selector := &EventSelect{config: eq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = eq.sqlQuery()
	return selector
}

func (eq *EventQuery) sqlAll(ctx context.Context) ([]*Event, error) {
	var (
		nodes   []*Event
		withFKs = eq.withFKs
		_spec   = eq.querySpec()
	)
	if eq.withJob != nil || eq.withFile != nil || eq.withCredential != nil || eq.withLink != nil || eq.withTag != nil || eq.withTarget != nil || eq.withTask != nil || eq.withUser != nil || eq.withEvent != nil || eq.withService != nil || eq.withOwner != nil || eq.withSvcOwner != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, event.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &Event{config: eq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}

	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := eq.withJob; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_job_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(job.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_job_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Job = n
			}
		}
	}

	if query := eq.withFile; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_file_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(file.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_file_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.File = n
			}
		}
	}

	if query := eq.withCredential; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_credential_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(credential.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_credential_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Credential = n
			}
		}
	}

	if query := eq.withLink; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_link_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(link.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_link_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Link = n
			}
		}
	}

	if query := eq.withTag; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_tag_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(tag.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_tag_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Tag = n
			}
		}
	}

	if query := eq.withTarget; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_target_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(target.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_target_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Target = n
			}
		}
	}

	if query := eq.withTask; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_task_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(task.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_task_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Task = n
			}
		}
	}

	if query := eq.withUser; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_user_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_user_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = n
			}
		}
	}

	if query := eq.withEvent; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_event_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(event.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_event_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Event = n
			}
		}
	}

	if query := eq.withService; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_service_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(service.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_service_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Service = n
			}
		}
	}

	if query := eq.withLikers; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Event)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.User(func(s *sql.Selector) {
			s.Where(sql.InValues(event.LikersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.event_liker_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "event_liker_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_liker_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Likers = append(node.Edges.Likers, n)
		}
	}

	if query := eq.withOwner; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].owner_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Owner = n
			}
		}
	}

	if query := eq.withSvcOwner; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].svc_owner_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(service.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "svc_owner_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.SvcOwner = n
			}
		}
	}

	return nodes, nil
}

func (eq *EventQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EventQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := eq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (eq *EventQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		},
		From:   eq.sql,
		Unique: true,
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EventQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(event.Table)
	selector := builder.Select(t1.Columns(event.Columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(event.Columns...)...)
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EventGroupBy is the builder for group-by Event entities.
type EventGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EventGroupBy) Aggregate(fns ...Aggregate) *EventGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the group-by query and scan the result into the given value.
func (egb *EventGroupBy) Scan(ctx context.Context, v interface{}) error {
	return egb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (egb *EventGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := egb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (egb *EventGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(egb.fields) > 1 {
		return nil, errors.New("ent: EventGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := egb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (egb *EventGroupBy) StringsX(ctx context.Context) []string {
	v, err := egb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (egb *EventGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(egb.fields) > 1 {
		return nil, errors.New("ent: EventGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := egb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (egb *EventGroupBy) IntsX(ctx context.Context) []int {
	v, err := egb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (egb *EventGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(egb.fields) > 1 {
		return nil, errors.New("ent: EventGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := egb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (egb *EventGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := egb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (egb *EventGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(egb.fields) > 1 {
		return nil, errors.New("ent: EventGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := egb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (egb *EventGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := egb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (egb *EventGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := egb.sqlQuery().Query()
	if err := egb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (egb *EventGroupBy) sqlQuery() *sql.Selector {
	selector := egb.sql
	columns := make([]string, 0, len(egb.fields)+len(egb.fns))
	columns = append(columns, egb.fields...)
	for _, fn := range egb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(egb.fields...)
}

// EventSelect is the builder for select fields of Event entities.
type EventSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (es *EventSelect) Scan(ctx context.Context, v interface{}) error {
	return es.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (es *EventSelect) ScanX(ctx context.Context, v interface{}) {
	if err := es.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (es *EventSelect) Strings(ctx context.Context) ([]string, error) {
	if len(es.fields) > 1 {
		return nil, errors.New("ent: EventSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := es.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (es *EventSelect) StringsX(ctx context.Context) []string {
	v, err := es.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (es *EventSelect) Ints(ctx context.Context) ([]int, error) {
	if len(es.fields) > 1 {
		return nil, errors.New("ent: EventSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := es.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (es *EventSelect) IntsX(ctx context.Context) []int {
	v, err := es.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (es *EventSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(es.fields) > 1 {
		return nil, errors.New("ent: EventSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := es.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (es *EventSelect) Float64sX(ctx context.Context) []float64 {
	v, err := es.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (es *EventSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(es.fields) > 1 {
		return nil, errors.New("ent: EventSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := es.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (es *EventSelect) BoolsX(ctx context.Context) []bool {
	v, err := es.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (es *EventSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := es.sqlQuery().Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (es *EventSelect) sqlQuery() sql.Querier {
	selector := es.sql
	selector.Select(selector.Columns(es.fields...)...)
	return selector
}
