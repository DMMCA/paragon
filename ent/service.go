// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/kcarretto/paragon/ent/service"
)

// Service is the model entity for the Service schema.
type Service struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// PubKey holds the value of the "PubKey" field.
	PubKey string `json:"PubKey,omitempty"`
	// Config holds the value of the "Config" field.
	Config string `json:"Config,omitempty"`
	// IsActivated holds the value of the "IsActivated" field.
	IsActivated bool `json:"IsActivated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceQuery when eager-loading is set.
	Edges struct {
		// Tag holds the value of the tag edge.
		Tag *Tag
		// Events holds the value of the events edge.
		Events []*Event
	} `json:"edges"`
	service_tag_id *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Service) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Name
		&sql.NullString{}, // PubKey
		&sql.NullString{}, // Config
		&sql.NullBool{},   // IsActivated
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Service) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // service_tag_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Service fields.
func (s *Service) assignValues(values ...interface{}) error {
	if m, n := len(values), len(service.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Name", values[0])
	} else if value.Valid {
		s.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PubKey", values[1])
	} else if value.Valid {
		s.PubKey = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Config", values[2])
	} else if value.Valid {
		s.Config = value.String
	}
	if value, ok := values[3].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field IsActivated", values[3])
	} else if value.Valid {
		s.IsActivated = value.Bool
	}
	values = values[4:]
	if len(values) == len(service.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field service_tag_id", value)
		} else if value.Valid {
			s.service_tag_id = new(int)
			*s.service_tag_id = int(value.Int64)
		}
	}
	return nil
}

// QueryTag queries the tag edge of the Service.
func (s *Service) QueryTag() *TagQuery {
	return (&ServiceClient{s.config}).QueryTag(s)
}

// QueryEvents queries the events edge of the Service.
func (s *Service) QueryEvents() *EventQuery {
	return (&ServiceClient{s.config}).QueryEvents(s)
}

// Update returns a builder for updating this Service.
// Note that, you need to call Service.Unwrap() before calling this method, if this Service
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Service) Update() *ServiceUpdateOne {
	return (&ServiceClient{s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Service) Unwrap() *Service {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Service is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Service) String() string {
	var builder strings.Builder
	builder.WriteString("Service(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", Name=")
	builder.WriteString(s.Name)
	builder.WriteString(", PubKey=")
	builder.WriteString(s.PubKey)
	builder.WriteString(", Config=")
	builder.WriteString(s.Config)
	builder.WriteString(", IsActivated=")
	builder.WriteString(fmt.Sprintf("%v", s.IsActivated))
	builder.WriteByte(')')
	return builder.String()
}

// Services is a parsable slice of Service.
type Services []*Service

func (s Services) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
