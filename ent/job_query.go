// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/predicate"
	"github.com/kcarretto/paragon/ent/tag"
	"github.com/kcarretto/paragon/ent/task"
	"github.com/kcarretto/paragon/ent/user"
)

// JobQuery is the builder for querying Job entities.
type JobQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.Job
	// eager-loading edges.
	withTasks *TaskQuery
	withTags  *TagQuery
	withPrev  *JobQuery
	withNext  *JobQuery
	withOwner *UserQuery
	withFKs   bool
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (jq *JobQuery) Where(ps ...predicate.Job) *JobQuery {
	jq.predicates = append(jq.predicates, ps...)
	return jq
}

// Limit adds a limit step to the query.
func (jq *JobQuery) Limit(limit int) *JobQuery {
	jq.limit = &limit
	return jq
}

// Offset adds an offset step to the query.
func (jq *JobQuery) Offset(offset int) *JobQuery {
	jq.offset = &offset
	return jq
}

// Order adds an order step to the query.
func (jq *JobQuery) Order(o ...Order) *JobQuery {
	jq.order = append(jq.order, o...)
	return jq
}

// QueryTasks chains the current query on the tasks edge.
func (jq *JobQuery) QueryTasks() *TaskQuery {
	query := &TaskQuery{config: jq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(job.Table, job.FieldID, jq.sqlQuery()),
		sqlgraph.To(task.Table, task.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, job.TasksTable, job.TasksColumn),
	)
	query.sql = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
	return query
}

// QueryTags chains the current query on the tags edge.
func (jq *JobQuery) QueryTags() *TagQuery {
	query := &TagQuery{config: jq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(job.Table, job.FieldID, jq.sqlQuery()),
		sqlgraph.To(tag.Table, tag.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, job.TagsTable, job.TagsPrimaryKey...),
	)
	query.sql = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
	return query
}

// QueryPrev chains the current query on the prev edge.
func (jq *JobQuery) QueryPrev() *JobQuery {
	query := &JobQuery{config: jq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(job.Table, job.FieldID, jq.sqlQuery()),
		sqlgraph.To(job.Table, job.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, job.PrevTable, job.PrevColumn),
	)
	query.sql = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
	return query
}

// QueryNext chains the current query on the next edge.
func (jq *JobQuery) QueryNext() *JobQuery {
	query := &JobQuery{config: jq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(job.Table, job.FieldID, jq.sqlQuery()),
		sqlgraph.To(job.Table, job.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, job.NextTable, job.NextColumn),
	)
	query.sql = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
	return query
}

// QueryOwner chains the current query on the owner edge.
func (jq *JobQuery) QueryOwner() *UserQuery {
	query := &UserQuery{config: jq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(job.Table, job.FieldID, jq.sqlQuery()),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, job.OwnerTable, job.OwnerColumn),
	)
	query.sql = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
	return query
}

// First returns the first Job entity in the query. Returns *ErrNotFound when no job was found.
func (jq *JobQuery) First(ctx context.Context) (*Job, error) {
	js, err := jq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(js) == 0 {
		return nil, &ErrNotFound{job.Label}
	}
	return js[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jq *JobQuery) FirstX(ctx context.Context) *Job {
	j, err := jq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return j
}

// FirstID returns the first Job id in the query. Returns *ErrNotFound when no id was found.
func (jq *JobQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &ErrNotFound{job.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (jq *JobQuery) FirstXID(ctx context.Context) int {
	id, err := jq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only Job entity in the query, returns an error if not exactly one entity was returned.
func (jq *JobQuery) Only(ctx context.Context) (*Job, error) {
	js, err := jq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(js) {
	case 1:
		return js[0], nil
	case 0:
		return nil, &ErrNotFound{job.Label}
	default:
		return nil, &ErrNotSingular{job.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jq *JobQuery) OnlyX(ctx context.Context) *Job {
	j, err := jq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return j
}

// OnlyID returns the only Job id in the query, returns an error if not exactly one id was returned.
func (jq *JobQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &ErrNotFound{job.Label}
	default:
		err = &ErrNotSingular{job.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (jq *JobQuery) OnlyXID(ctx context.Context) int {
	id, err := jq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Jobs.
func (jq *JobQuery) All(ctx context.Context) ([]*Job, error) {
	return jq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (jq *JobQuery) AllX(ctx context.Context) []*Job {
	js, err := jq.All(ctx)
	if err != nil {
		panic(err)
	}
	return js
}

// IDs executes the query and returns a list of Job ids.
func (jq *JobQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := jq.Select(job.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jq *JobQuery) IDsX(ctx context.Context) []int {
	ids, err := jq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jq *JobQuery) Count(ctx context.Context) (int, error) {
	return jq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (jq *JobQuery) CountX(ctx context.Context) int {
	count, err := jq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jq *JobQuery) Exist(ctx context.Context) (bool, error) {
	return jq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (jq *JobQuery) ExistX(ctx context.Context) bool {
	exist, err := jq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jq *JobQuery) Clone() *JobQuery {
	return &JobQuery{
		config:     jq.config,
		limit:      jq.limit,
		offset:     jq.offset,
		order:      append([]Order{}, jq.order...),
		unique:     append([]string{}, jq.unique...),
		predicates: append([]predicate.Job{}, jq.predicates...),
		// clone intermediate query.
		sql: jq.sql.Clone(),
	}
}

//  WithTasks tells the query-builder to eager-loads the nodes that are connected to
// the "tasks" edge. The optional arguments used to configure the query builder of the edge.
func (jq *JobQuery) WithTasks(opts ...func(*TaskQuery)) *JobQuery {
	query := &TaskQuery{config: jq.config}
	for _, opt := range opts {
		opt(query)
	}
	jq.withTasks = query
	return jq
}

//  WithTags tells the query-builder to eager-loads the nodes that are connected to
// the "tags" edge. The optional arguments used to configure the query builder of the edge.
func (jq *JobQuery) WithTags(opts ...func(*TagQuery)) *JobQuery {
	query := &TagQuery{config: jq.config}
	for _, opt := range opts {
		opt(query)
	}
	jq.withTags = query
	return jq
}

//  WithPrev tells the query-builder to eager-loads the nodes that are connected to
// the "prev" edge. The optional arguments used to configure the query builder of the edge.
func (jq *JobQuery) WithPrev(opts ...func(*JobQuery)) *JobQuery {
	query := &JobQuery{config: jq.config}
	for _, opt := range opts {
		opt(query)
	}
	jq.withPrev = query
	return jq
}

//  WithNext tells the query-builder to eager-loads the nodes that are connected to
// the "next" edge. The optional arguments used to configure the query builder of the edge.
func (jq *JobQuery) WithNext(opts ...func(*JobQuery)) *JobQuery {
	query := &JobQuery{config: jq.config}
	for _, opt := range opts {
		opt(query)
	}
	jq.withNext = query
	return jq
}

//  WithOwner tells the query-builder to eager-loads the nodes that are connected to
// the "owner" edge. The optional arguments used to configure the query builder of the edge.
func (jq *JobQuery) WithOwner(opts ...func(*UserQuery)) *JobQuery {
	query := &UserQuery{config: jq.config}
	for _, opt := range opts {
		opt(query)
	}
	jq.withOwner = query
	return jq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"Name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Job.Query().
//		GroupBy(job.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (jq *JobQuery) GroupBy(field string, fields ...string) *JobGroupBy {
	group := &JobGroupBy{config: jq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = jq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Name string `json:"Name,omitempty"`
//	}
//
//	client.Job.Query().
//		Select(job.FieldName).
//		Scan(ctx, &v)
//
func (jq *JobQuery) Select(field string, fields ...string) *JobSelect {
	selector := &JobSelect{config: jq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = jq.sqlQuery()
	return selector
}

func (jq *JobQuery) sqlAll(ctx context.Context) ([]*Job, error) {
	var (
		nodes   []*Job
		withFKs = jq.withFKs
		_spec   = jq.querySpec()
	)
	if jq.withPrev != nil || jq.withOwner != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, job.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &Job{config: jq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, jq.driver, _spec); err != nil {
		return nil, err
	}

	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := jq.withTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Job)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Task(func(s *sql.Selector) {
			s.Where(sql.InValues(job.TasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.job_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "job_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "job_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Tasks = append(node.Edges.Tasks, n)
		}
	}

	if query := jq.withTags; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*Job, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
		}
		var (
			edgeids []int
			edges   = make(map[int][]*Job)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   job.TagsTable,
				Columns: job.TagsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(job.TagsPrimaryKey[0], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(eout.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, jq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "tags": %v`, err)
		}
		query.Where(tag.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "tags" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Tags = append(nodes[i].Edges.Tags, n)
			}
		}
	}

	if query := jq.withPrev; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Job)
		for i := range nodes {
			if fk := nodes[i].prev_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(job.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "prev_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Prev = n
			}
		}
	}

	if query := jq.withNext; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Job)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Job(func(s *sql.Selector) {
			s.Where(sql.InValues(job.NextColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.prev_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "prev_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "prev_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Next = n
		}
	}

	if query := jq.withOwner; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Job)
		for i := range nodes {
			if fk := nodes[i].owner_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Owner = n
			}
		}
	}

	return nodes, nil
}

func (jq *JobQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jq.querySpec()
	return sqlgraph.CountNodes(ctx, jq.driver, _spec)
}

func (jq *JobQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := jq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (jq *JobQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   job.Table,
			Columns: job.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		},
		From:   jq.sql,
		Unique: true,
	}
	if ps := jq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jq *JobQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(jq.driver.Dialect())
	t1 := builder.Table(job.Table)
	selector := builder.Select(t1.Columns(job.Columns...)...).From(t1)
	if jq.sql != nil {
		selector = jq.sql
		selector.Select(selector.Columns(job.Columns...)...)
	}
	for _, p := range jq.predicates {
		p(selector)
	}
	for _, p := range jq.order {
		p(selector)
	}
	if offset := jq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// JobGroupBy is the builder for group-by Job entities.
type JobGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jgb *JobGroupBy) Aggregate(fns ...Aggregate) *JobGroupBy {
	jgb.fns = append(jgb.fns, fns...)
	return jgb
}

// Scan applies the group-by query and scan the result into the given value.
func (jgb *JobGroupBy) Scan(ctx context.Context, v interface{}) error {
	return jgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (jgb *JobGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := jgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (jgb *JobGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(jgb.fields) > 1 {
		return nil, errors.New("ent: JobGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := jgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (jgb *JobGroupBy) StringsX(ctx context.Context) []string {
	v, err := jgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (jgb *JobGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(jgb.fields) > 1 {
		return nil, errors.New("ent: JobGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := jgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (jgb *JobGroupBy) IntsX(ctx context.Context) []int {
	v, err := jgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (jgb *JobGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(jgb.fields) > 1 {
		return nil, errors.New("ent: JobGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := jgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (jgb *JobGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := jgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (jgb *JobGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(jgb.fields) > 1 {
		return nil, errors.New("ent: JobGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := jgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (jgb *JobGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := jgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (jgb *JobGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := jgb.sqlQuery().Query()
	if err := jgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (jgb *JobGroupBy) sqlQuery() *sql.Selector {
	selector := jgb.sql
	columns := make([]string, 0, len(jgb.fields)+len(jgb.fns))
	columns = append(columns, jgb.fields...)
	for _, fn := range jgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(jgb.fields...)
}

// JobSelect is the builder for select fields of Job entities.
type JobSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (js *JobSelect) Scan(ctx context.Context, v interface{}) error {
	return js.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (js *JobSelect) ScanX(ctx context.Context, v interface{}) {
	if err := js.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (js *JobSelect) Strings(ctx context.Context) ([]string, error) {
	if len(js.fields) > 1 {
		return nil, errors.New("ent: JobSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := js.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (js *JobSelect) StringsX(ctx context.Context) []string {
	v, err := js.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (js *JobSelect) Ints(ctx context.Context) ([]int, error) {
	if len(js.fields) > 1 {
		return nil, errors.New("ent: JobSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := js.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (js *JobSelect) IntsX(ctx context.Context) []int {
	v, err := js.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (js *JobSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(js.fields) > 1 {
		return nil, errors.New("ent: JobSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := js.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (js *JobSelect) Float64sX(ctx context.Context) []float64 {
	v, err := js.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (js *JobSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(js.fields) > 1 {
		return nil, errors.New("ent: JobSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := js.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (js *JobSelect) BoolsX(ctx context.Context) []bool {
	v, err := js.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (js *JobSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := js.sqlQuery().Query()
	if err := js.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (js *JobSelect) sqlQuery() sql.Querier {
	selector := js.sql
	selector.Select(selector.Columns(js.fields...)...)
	return selector
}
