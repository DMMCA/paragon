// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/kcarretto/paragon/ent/file"
)

// File is the model entity for the File schema.
type File struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// CreationTime holds the value of the "CreationTime" field.
	CreationTime time.Time `json:"CreationTime,omitempty"`
	// LastModifiedTime holds the value of the "LastModifiedTime" field.
	LastModifiedTime time.Time `json:"LastModifiedTime,omitempty"`
	// Size holds the value of the "Size" field.
	Size int `json:"Size,omitempty"`
	// Content holds the value of the "Content" field.
	Content []byte `json:"Content,omitempty"`
	// Hash holds the value of the "Hash" field.
	Hash string `json:"Hash,omitempty"`
	// ContentType holds the value of the "ContentType" field.
	ContentType string `json:"ContentType,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileQuery when eager-loading is set.
	Edges struct {
		// Links holds the value of the links edge.
		Links []*Link
	} `json:"edges"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*File) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Name
		&sql.NullTime{},   // CreationTime
		&sql.NullTime{},   // LastModifiedTime
		&sql.NullInt64{},  // Size
		&[]byte{},         // Content
		&sql.NullString{}, // Hash
		&sql.NullString{}, // ContentType
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the File fields.
func (f *File) assignValues(values ...interface{}) error {
	if m, n := len(values), len(file.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	f.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Name", values[0])
	} else if value.Valid {
		f.Name = value.String
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field CreationTime", values[1])
	} else if value.Valid {
		f.CreationTime = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field LastModifiedTime", values[2])
	} else if value.Valid {
		f.LastModifiedTime = value.Time
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field Size", values[3])
	} else if value.Valid {
		f.Size = int(value.Int64)
	}
	if value, ok := values[4].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field Content", values[4])
	} else if value != nil {
		f.Content = *value
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Hash", values[5])
	} else if value.Valid {
		f.Hash = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ContentType", values[6])
	} else if value.Valid {
		f.ContentType = value.String
	}
	return nil
}

// QueryLinks queries the links edge of the File.
func (f *File) QueryLinks() *LinkQuery {
	return (&FileClient{f.config}).QueryLinks(f)
}

// Update returns a builder for updating this File.
// Note that, you need to call File.Unwrap() before calling this method, if this File
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *File) Update() *FileUpdateOne {
	return (&FileClient{f.config}).UpdateOne(f)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (f *File) Unwrap() *File {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: File is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *File) String() string {
	var builder strings.Builder
	builder.WriteString("File(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", Name=")
	builder.WriteString(f.Name)
	builder.WriteString(", CreationTime=")
	builder.WriteString(f.CreationTime.Format(time.ANSIC))
	builder.WriteString(", LastModifiedTime=")
	builder.WriteString(f.LastModifiedTime.Format(time.ANSIC))
	builder.WriteString(", Size=")
	builder.WriteString(fmt.Sprintf("%v", f.Size))
	builder.WriteString(", Content=")
	builder.WriteString(fmt.Sprintf("%v", f.Content))
	builder.WriteString(", Hash=")
	builder.WriteString(f.Hash)
	builder.WriteString(", ContentType=")
	builder.WriteString(f.ContentType)
	builder.WriteByte(')')
	return builder.String()
}

// Files is a parsable slice of File.
type Files []*File

func (f Files) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
